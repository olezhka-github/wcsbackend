const crypto = require('crypto');
const express = require('express');
const WebSocket = require('ws');
const sqlite3 = require('sqlite3').verbose();
const http = require('http');
const moment = require('moment-timezone');
const { json } = require('body-parser');
const { v4: uuidv4 } = require('uuid');

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

const SECRET_KEY = '+*–¥C19a90-`‚ô´QIAh—èw19)9!‚Ññ–æ–ûJ–õQ%l';
const IV_LENGTH = SECRET_KEY.length;

const onlineUsers = new Map();

const db = new sqlite3.Database('./users.db');
db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS users (
      username TEXT PRIMARY KEY,
      password TEXT
  )`);

  db.run(`CREATE TABLE IF NOT EXISTS friends (
      username TEXT,
      friend TEXT,
      FOREIGN KEY(username) REFERENCES users(username),
      FOREIGN KEY(friend) REFERENCES users(username)
  )`);

  db.run(`CREATE TABLE IF NOT EXISTS chat_history (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      username TEXT,
      message TEXT,
      type TEXT DEFAULT 'message',
      stickerUrl TEXT,
      timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY(username) REFERENCES users(username)
  )`);

  db.run(`CREATE TABLE IF NOT EXISTS profiles (
      username TEXT PRIMARY KEY,
      about TEXT DEFAULT ''
  )`);

  db.run(`CREATE TABLE IF NOT EXISTS uuid (
    username TEXT PRIMARY KEY,
    uuid TEXT DEFAULT ''
  )`);

  db.run(`CREATE TABLE IF NOT EXISTS bans (
      banned_until INTEGER,
      username TEXT PRIMARY KEY,
      banned_by TEXT,
      duration_days INTEGER,
      reason TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY(username) REFERENCES users(username)
  )`);

  db.run(`CREATE TABLE IF NOT EXISTS calls (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      caller TEXT,
      recipient TEXT,
      status TEXT,
      timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY(caller) REFERENCES users(username),
      FOREIGN KEY(recipient) REFERENCES users(username)
  )`);
});

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ UUID
function verifyUuid(ws, username, providedUuid, callback) {
  db.get('SELECT uuid FROM uuid WHERE username = ?', [username], (err, row) => {
    if (err || !row) {
      ws.send(JSON.stringify({ action: 'error', message: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ UUID' }));
      return;
    }
    if (row.uuid !== providedUuid) {
      ws.send(JSON.stringify({ action: 'error', message: '–ù–µ–≤—ñ—Ä–Ω–∏–π UUID —Å–µ—Å—ñ—ó' }));
      return;
    }
    callback();
  });
}

// –û–±—Ä–æ–±–∫–∞ WebSocket-–∑'—î–¥–Ω–∞–Ω—å
wss.on('connection', (ws) => {
  console.log('–ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è');

  ws.on('message', (message) => {
    let data;
    try {
      data = JSON.parse(message);
    } catch (err) {
      ws.send(JSON.stringify({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è' }));
      return;
    }
    console.log('–û—Ç—Ä–∏–º–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', data);

    switch (data.action) {
      case 'login':
        handleLogin(ws, data.username, data.password);
        break;
      case 'logout':
        handleLogout(ws, data.username, data.uuid);
        break;
      case 'call':
        handleCall(ws, ws.username, data.uuid, data.recipient);
        break;
      case 'answer_call':
        handleAnswerCall(ws, data.caller, ws.username, data.uuid);
        break;
      case 'decline_call':
        handleDeclineCall(ws, data.caller, ws.username, data.uuid);
        break;
      case 'load_call_history':
        handleLoadCallHistory(ws, ws.username, data.uuid);
        break;
      case 'get_online_users':
        handleGetOnlineUsers(ws, data.uuid);
        break;
      case 'ban_user':
        handleBanUser(ws, data.username, data.duration, data.token, data.reason, data.banned_by, data.uuid);
        break;
      case 'get_active_bans':
        handleGetActiveBans(ws, data.uuid);
        break;
      case 'unban_user':
        handleUnbanUser(ws, data.username, data.uuid);
        break;
      case 'create_account':
        handleCreateAccount(ws, data.username, data.password);
        break;
      case 'send_message':
        handleSendMessage(ws, data.username, data.uuid, data.message, data.type, data.stickerUrl);
        break;
      case 'send_sticker':
        handleSendMessage(ws, data.username, data.uuid, '', 'sticker', data.stickerUrl);
        break;
      case 'addFriend':
        handleAddFriend(ws, data.username, data.friendUsername, data.uuid);
        break;
      case 'loadFriendList':
        handleLoadFriendList(ws, data.username, data.uuid);
        break;
      case 'loadChatHistory':
        handleLoadChatHistory(ws, data.uuid);
        break;
      case 'private_message':
        handlePrivateMessage(ws, data.username, data.uuid, data.message, data.recipient);
        break;
      case 'loadUserList':
        handleLoadUserList(ws, data.uuid);
        break;
      case 'get_profile':
        handleGetProfile(ws, data.username, data.uuid);
        break;
      case 'update_profile':
        handleUpdateProfile(ws, data.username, data.about, data.uuid);
        break;
      case 'signal':
        handleSignal(ws, data);
        break;
      default:
        ws.send(JSON.stringify({ message: '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞' }));
        break;
    }
  });

  ws.on('close', () => {
    console.log('–ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è');
    handleUserDisconnect(ws);
  });

  ws.on('error', (error) => {
    console.error('–ü–æ–º–∏–ª–∫–∞ WebSocket:', error);
  });
});

function handleSignal(ws, data) {
  // –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º, –º–æ–∂–Ω–∞ —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ UUID —Ç—É—Ç
  const { recipient, signalData, uuid, sender } = data;
  verifyUuid(ws, sender, uuid, () => {
    const recipientWS = onlineUsers.get(recipient);
    if (recipientWS && recipientWS.readyState === WebSocket.OPEN) {
      recipientWS.send(JSON.stringify({
        action: 'signal',
        sender: ws.username,
        signalData,
      }));
    } else {
      ws.send(JSON.stringify({ action: 'signal', success: false, message: '–û–¥–µ—Ä–∂—É–≤–∞—á –Ω–µ –æ–Ω–ª–∞–π–Ω' }));
    }
  });
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
function formatDate(dateString) {
  const months = [
    '—Å—ñ—á–Ω—è', '–ª—é—Ç–æ–≥–æ', '–±–µ—Ä–µ–∑–Ω—è', '–∫–≤—ñ—Ç–Ω—è', '—Ç—Ä–∞–≤–Ω—è', '—á–µ—Ä–≤–Ω—è',
    '–ª–∏–ø–Ω—è', '—Å–µ—Ä–ø–Ω—è', '–≤–µ—Ä–µ—Å–Ω—è', '–∂–æ–≤—Ç–Ω—è', '–ª–∏—Å—Ç–æ–ø–∞–¥–∞', '–≥—Ä—É–¥–Ω—è'
  ];

  const date = new Date(dateString);
  const day = date.getDate();
  const month = months[date.getMonth()];
  const year = date.getFullYear();

  return `${day} ${month} ${year} —Ä–æ–∫—É`;
}

// –õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —ñ—Å–Ω—É—é—á–∏–π UUID –∑ –ë–î)
function handleLogin(ws, username, password) {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–Ω—É
  db.get(
    `SELECT *, DATE(created_at, '+' || duration_days || ' days') AS ban_until 
     FROM bans WHERE username = ?`,
    [username],
    (err, ban) => {
      if (err) {
        ws.send(JSON.stringify({ action: "login", success: false, message: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É' }));
        return;
      }

      if (ban) {
        const now = new Date();
        const banUntil = new Date(ban.ban_until);
        if (now < banUntil) {
          ws.send(
            JSON.stringify({
              action: "login",
              success: false,
              message: `–í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –¥–æ ${formatDate(ban.ban_until)}\n–ü—Ä–∏—á–∏–Ω–∞: ${ban.reason || '–ü–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª'}\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: ${ban.banned_by}`,
            })
          );
          return;
        } else {
          // –í–∏–¥–∞–ª–µ–Ω–Ω—è –±–∞–Ω—É, —è–∫—â–æ —Ç–µ—Ä–º—ñ–Ω —Å–ø–ª–∏–≤
          db.run('DELETE FROM bans WHERE username = ?', [username]);
        }
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–Ω–∞ —Ç–∞ –ø–∞—Ä–æ–ª—è
      db.get('SELECT * FROM users WHERE username = ? AND password = ?', [username, password], (err, row) => {
        if (err) {
          ws.send(JSON.stringify({ action: "login", success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
        } else if (row) {
          ws.username = username;
          onlineUsers.set(username, ws);

          // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ UUID –∑ –ë–î
          db.get('SELECT uuid FROM uuid WHERE username = ?', [username], (err, uuidRow) => {
            if (err || !uuidRow) {
              // –Ø–∫—â–æ UUID —â–µ –Ω–µ–º–∞—î ‚Äì –≥–µ–Ω–µ—Ä—É—î–º–æ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
              const userUuid = uuidv4();
              ws.uuid = userUuid;
              db.run('INSERT OR REPLACE INTO uuid (username, uuid) VALUES (?, ?)', [username, userUuid]);
              sendLoginResponse(ws, username, userUuid);
            } else {
              ws.uuid = uuidRow.uuid;
              sendLoginResponse(ws, username, uuidRow.uuid);
            }
          });
        } else {
          ws.send(JSON.stringify({ action: "login", success: false, message: '–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ' }));
        }
      });
    }
  );
}

function sendLoginResponse(ws, username, userUuid) {
  // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ HTML –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–∞–Ω–∞–º–∏
  if (['hideyoshi.xaotiq', 'moderator.roman'].includes(username)) {
    const banPageHTML = `
      <div class="gcard">
        <h3>üî® –ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–∞–Ω–∞–º–∏</h3>
        <div class="ban-control">
          <input type="text" id="ban-username" placeholder="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á">
          <input type="number" id="ban-duration" placeholder="–î–Ω—ñ" min="1">
          <textarea id="ban-reason" placeholder="–ü—Ä–∏—á–∏–Ω–∞"></textarea>
          <button onclick="banUser()">–ó–∞–±–∞–Ω–∏—Ç–∏</button>
          <button onclick="unbanUser()">–†–æ–∑–±–∞–Ω–∏—Ç–∏</button>
        </div>
        <div id="active-bans-list"></div>
      </div>
      <script>
        function banUser() {
          const username = document.getElementById('ban-username').value;
          const duration = document.getElementById('ban-duration').value;
          const reason = document.getElementById('ban-reason').value;
          ws.send(JSON.stringify({
            action: 'ban_user',
            username: username,
            duration: duration,
            reason: reason,
            banned_by: '${username}',
            uuid: ws.uuid
          }));
        }
        
        function unbanUser() {
          const username = document.getElementById('ban-username').value;
          ws.send(JSON.stringify({
            action: 'unban_user',
            username: username,
            uuid: ws.uuid
          }));
        }
        
        ws.send(JSON.stringify({action: 'get_active_bans', uuid: ws.uuid}));
      </script>
    `;
    ws.send(JSON.stringify({ action: 'banPage', html: banPageHTML }));
  }

  ws.send(JSON.stringify({ action: "login", success: true, username, uuid: userUuid }));
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ (—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é UUID)
function handleCreateAccount(ws, username, password) {
  db.get('SELECT username FROM users WHERE username = ?', [username], (err, row) => {
    if (err) {
      ws.send(JSON.stringify({ action: 'createAccount', success: false, message: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' }));
      return;
    }
    if (row) {
      ws.send(JSON.stringify({ action: 'createAccount', success: false, message: '–Ü–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∂–µ —ñ—Å–Ω—É—î' }));
    } else {
      db.run('INSERT INTO users (username, password) VALUES (?, ?)', [username, password], function (err) {
        if (err) {
          ws.send(JSON.stringify({ action: 'createAccount', success: false, message: '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É' }));
        } else {
          // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          db.run('INSERT INTO profiles (username, about) VALUES (?, ?)', [username, ''], (err) => {
            if (err) {
              console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:', err);
            }
          });
          // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è UUID –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
          const userUuid = uuidv4();
          ws.username = username;
          ws.uuid = userUuid;
          onlineUsers.set(username, ws);
          db.run('INSERT INTO uuid (username, uuid) VALUES (?, ?)', [username, userUuid]);
          ws.send(JSON.stringify({ action: 'createAccount', success: true, username, uuid: userUuid }));
        }
      });
    }
  });
}

// –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ UUID)
function handleSendMessage(ws, username, providedUuid, message, type = 'message', stickerUrl = '') {
  verifyUuid(ws, username, providedUuid, () => {
    const query = `
      INSERT INTO chat_history (username, message, type, stickerUrl)
      VALUES (?, ?, ?, ?)
    `;
    const params = [username, message, type, stickerUrl];

    db.run(query, params, (err) => {
      if (err) {
        ws.send(JSON.stringify({ action: 'sendMessage', success: false, message: '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è' }));
      } else {
        // –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º
        wss.clients.forEach((client) => {
          if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify({
              action: 'new_message',
              username,
              message: type === 'sticker' ? '' : message,
              type,
              stickerUrl,
            }));
          }
        });
        ws.send(JSON.stringify({ action: 'sendMessage', success: true }));
      }
    });
  });
}

// –ü—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ UUID)
function handlePrivateMessage(ws, username, providedUuid, message, recipient) {
  verifyUuid(ws, username, providedUuid, () => {
    const formattedMessage = `[Private] ${username}: ${message}`;
    wss.clients.forEach((client) => {
      if (
        client.readyState === WebSocket.OPEN &&
        (client.username === recipient || client.username === username)
      ) {
        client.send(JSON.stringify({
          action: 'private_message',
          from: username,
          recipient: recipient,
          message: formattedMessage,
        }));
      }
    });
  });
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥—Ä—É–≥–∞ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ UUID)
function handleAddFriend(ws, username, friendUsername, providedUuid) {
  verifyUuid(ws, username, providedUuid, () => {
    db.get('SELECT * FROM users WHERE username = ?', [friendUsername], (err, row) => {
      if (err) {
        ws.send(JSON.stringify({ action: 'addFriend', success: false, message: '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥—Ä—É–≥–∞' }));
      } else if (row) {
        db.run('INSERT INTO friends (username, friend) VALUES (?, ?)', [username, friendUsername], (err) => {
          if (err) {
            ws.send(JSON.stringify({ action: 'addFriend', success: false, message: '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥—Ä—É–≥–∞' }));
          } else {
            ws.send(JSON.stringify({ action: 'addFriend', success: true, friendUsername }));
          }
        });
      } else {
        ws.send(JSON.stringify({ action: 'addFriend', success: false, message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' }));
      }
    });
  });
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥—Ä—É–∑—ñ–≤ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ UUID)
function handleLoadFriendList(ws, username, providedUuid) {
  verifyUuid(ws, username, providedUuid, () => {
    db.all('SELECT friend FROM friends WHERE username = ?', [username], (err, rows) => {
      if (err) {
        ws.send(JSON.stringify({ action: 'loadFriendList', success: false, message: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥—Ä—É–∑—ñ–≤' }));
      } else {
        const friends = rows.map((row) => row.friend);
        ws.send(JSON.stringify({ action: 'loadFriendList', friends }));
      }
    });
  });
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç—É (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ UUID)
function handleLoadChatHistory(ws, providedUuid) {
  if (!ws.username) {
    ws.send(JSON.stringify({ action: 'loadChatHistory', success: false, message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π' }));
    return;
  }
  verifyUuid(ws, ws.username, providedUuid, () => {
    db.all('SELECT username, message, type, stickerUrl FROM chat_history ORDER BY id ASC', [], (err, rows) => {
      if (err) {
        ws.send(JSON.stringify({ action: 'loadChatHistory', success: false, message: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É' }));
      } else {
        ws.send(JSON.stringify({ action: 'loadChatHistory', chatHistory: rows }));
      }
    });
  });
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ UUID)
function handleLoadUserList(ws, providedUuid) {
  if (!ws.username) {
    ws.send(JSON.stringify({ action: 'loadUserList', success: false, message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π' }));
    return;
  }
  verifyUuid(ws, ws.username, providedUuid, () => {
    db.all('SELECT username FROM users', [], (err, rows) => {
      if (err) {
        ws.send(JSON.stringify({ action: 'loadUserList', success: false, message: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤' }));
      } else {
        const users = rows.map((row) => row.username);
        ws.send(JSON.stringify({ action: 'loadUserList', success: true, users }));
      }
    });
  });
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ UUID)
function handleGetProfile(ws, username, providedUuid) {
  verifyUuid(ws, username, providedUuid, () => {
    db.get('SELECT about FROM profiles WHERE username = ?', [username], (err, row) => {
      if (err) {
        ws.send(JSON.stringify({ action: 'get_profile', success: false, message: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é' }));
      } else if (row) {
        ws.send(JSON.stringify({ action: 'get_profile', success: true, about: row.about }));
      } else {
        ws.send(JSON.stringify({ action: 'get_profile', success: true, about: '' }));
      }
    });
  });
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ UUID)
function handleUpdateProfile(ws, username, about, providedUuid) {
  verifyUuid(ws, username, providedUuid, () => {
    db.run('UPDATE profiles SET about = ? WHERE username = ?', [about, username], function (err) {
      if (err) {
        ws.send(JSON.stringify({ action: 'update_profile', success: false, message: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é' }));
      } else {
        ws.send(JSON.stringify({ action: 'update_profile', success: true, about }));
      }
    });
  });
}

// –í–∏—Ö—ñ–¥ –∑ –∞–∫–∞—É–Ω—Ç—É (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ UUID)
function handleLogout(ws, username, providedUuid) {
  verifyUuid(ws, username, providedUuid, () => {
    if (onlineUsers.has(username)) {
      onlineUsers.delete(username);
      ws.send(JSON.stringify({ action: 'logout', success: true, message: '–í–∏ –≤–∏–π—à–ª–∏' }));
      broadcastOnlineStatus();
    }
  });
}

// –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function handleUserDisconnect(ws) {
  if (ws.username && onlineUsers.has(ws.username)) {
    onlineUsers.delete(ws.username);
    broadcastOnlineStatus();
  }
}

// –†–æ–∑—Å–∏–ª–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –æ–Ω–ª–∞–π–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
function broadcastOnlineStatus() {
  const users = Array.from(onlineUsers.keys());
  wss.clients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify({ action: 'online_users', users }));
    }
  });
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –æ–Ω–ª–∞–π–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ UUID)
function handleGetOnlineUsers(ws, providedUuid) {
  if (!ws.username) {
    ws.send(JSON.stringify({ action: 'online_users', success: false, message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π' }));
    return;
  }
  verifyUuid(ws, ws.username, providedUuid, () => {
    const users = Array.from(onlineUsers.keys());
    ws.send(JSON.stringify({ action: 'online_users', users }));
  });
}

// –û–±—Ä–æ–±–∫–∞ –≤–∏–∫–ª–∏–∫—É (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ UUID)
function handleCall(ws, caller, providedUuid, recipient) {
  verifyUuid(ws, caller, providedUuid, () => {
    if (!onlineUsers.has(recipient)) {
      ws.send(JSON.stringify({ action: 'call', success: false, message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤ –º–µ—Ä–µ–∂—ñ' }));
      return;
    }
    const recipientWs = onlineUsers.get(recipient);
    recipientWs.send(JSON.stringify({ action: 'incoming_call', caller }));
    db.run('INSERT INTO calls (caller, recipient, status) VALUES (?, ?, ?)', [caller, recipient, 'missed']);
  });
}

// –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤–∏–∫–ª–∏–∫ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ UUID)
function handleAnswerCall(ws, caller, recipient, providedUuid) {
  verifyUuid(ws, recipient, providedUuid, () => {
    db.run(
      `UPDATE calls SET status = ? WHERE id = (
        SELECT id FROM calls WHERE caller = ? AND recipient = ? ORDER BY timestamp DESC LIMIT 1
      )`,
      ['answered', caller, recipient],
      (err) => {
        if (err) {
          console.error(err);
        }
      }
    );
    const callerWs = onlineUsers.get(caller);
    if (callerWs) {
      callerWs.send(JSON.stringify({ action: 'call_answered', recipient }));
    }
    ws.send(JSON.stringify({ action: 'call_answered', caller }));
  });
}

// –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –≤–∏–∫–ª–∏–∫—É (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ UUID)
function handleDeclineCall(ws, caller, recipient, providedUuid) {
  verifyUuid(ws, recipient, providedUuid, () => {
    db.run(
      `UPDATE calls SET status = ? WHERE id = (
        SELECT id FROM calls WHERE caller = ? AND recipient = ? ORDER BY timestamp DESC LIMIT 1
      )`,
      ['declined', caller, recipient],
      (err) => {
        if (err) {
          console.error(err);
        }
      }
    );
    const callerWs = onlineUsers.get(caller);
    if (callerWs) {
      callerWs.send(JSON.stringify({ action: 'call_declined', recipient }));
    }
    ws.send(JSON.stringify({ action: 'call_declined', caller }));
  });
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –¥–∑–≤—ñ–Ω–∫—ñ–≤ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ UUID)
function handleLoadCallHistory(ws, username, providedUuid) {
  verifyUuid(ws, username, providedUuid, () => {
    db.all('SELECT * FROM calls WHERE caller = ? OR recipient = ? ORDER BY timestamp DESC', [username, username], (err, rows) => {
      if (err) {
        ws.send(JSON.stringify({ action: 'load_call_history', success: false, message: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –¥–∑–≤—ñ–Ω–∫—ñ–≤' }));
      } else {
        ws.send(JSON.stringify({ action: 'load_call_history', success: true, callHistory: rows }));
      }
    });
  });
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –±–∞–Ω—ñ–≤ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ UUID)
function handleGetActiveBans(ws, providedUuid) {
  if (!ws.username) {
    ws.send(JSON.stringify({ action: 'get_active_bans', success: false, message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π' }));
    return;
  }
  verifyUuid(ws, ws.username, providedUuid, () => {
    const nowUnix = moment().unix();
    db.all('SELECT * FROM bans WHERE banned_until > ?', [nowUnix], (err, rows) => {
      if (err) {
        ws.send(JSON.stringify({ action: 'get_active_bans', success: false, message: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –±–∞–Ω—ñ–≤' }));
      } else {
        ws.send(JSON.stringify({ action: 'get_active_bans', success: true, bans: rows }));
      }
    });
  });
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 2573;
server.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
